<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- @Autowired 를 처리하려면 객체를 생성한 후 그 작업을 수행할 객체를 
    컨테이너에 등록해야 한다. 등록해 두면 컨테이너가 사용할 것이다.
     -->
    <context:component-scan base-package="bitcamp.pms">

    </context:component-scan>
    <!--  -->
     <mvc:annotation-driven enable-matrix-variables="true"/>
    <!-- 트랜잭션 관련 애노테이션 객체를 등록한다. -->
    <tx:annotation-driven transaction-manager="txManager"/>
    
     <!--애노테이션이 아닌  -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- get 으로 시작하는것은 업데이트 하지말고 오직 읽어라 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    
    
    <!--트랜잭션을 적용할 대상을 설정한다.  -->
    
     <aop:config>
     <!--대상의 규칙을 선언합니다.  -->
        <aop:pointcut id="ServiceOperation" 
        expression="execution(* bitcamp.pms.service.*.*(..))"/>
        <!--대상에 대해 어떤 트랜잭션을 적용할 지 설정한ㄷㅏ  -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="ServiceOperation"/>
    </aop:config>
    
   
 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>          
    <property name="mapperLocations" value="classpath:bitcamp/pms/sql/**/*.xml" />
    <property name="typeAliasesPackage"
        value="bitcamp.pms.domain"/>
  </bean>

            
   <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    
       <!-- similarly, don't forget the PlatformTransactionManager -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!--DAO 인터페이스로 부터  구현체를 자동생성하는 객체 등록 
    => DAO 구현체가 사용할 SQL mapper 파일은 namespace 값으로 찾는다
    => 따라서 인터페이스 명과 SQL 맵퍼의 namespace 값은 같아야 한다.
    => 또한 인터페이스의 메서드 명과 SQL id 는 같아야한다. 
    
      -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
  <property name="basePackage" value="bitcamp.pms.dao" />
    </bean>
    
    
    <!-- properties 파일을 읽어서 그데이터를 보관할 객체를 등록한다.  -->
    <context:property-placeholder 
        location="classpath:bitcamp/pms/config/jdbc.properties"/>
        
  <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    <property name="prefix" value="/WEB-INF/jsp/"/>
    <property name="suffix" value=".jsp"/>
</bean>
        
        
</beans>